*****Use Case for Design Pattern******

1. Singleton Design Pattern:
                   * Singleton restricts the instantiation of a class and ensures that only one instance of the class exists in the JVM.
                    *The singleton class must provide a global access point to get the instance of the class.
                     * A singleton should be used when managing access to a resource which is shared by the entire application,
 and it would be destructive to potentially have multiple instances of the same class. 
Making sure that access to shared resources thread safe is one very good example of where this kind of pattern can be vital.

2.Prototype Design Pattern:

                      * Prototype design pattern is used when the Object creation is a costly affair and requires a lot of time and resources and you have a similar object already existing. 
Prototype pattern provides a mechanism to copy the original object to a new object and then modify it according to our needs.
                         * Prototype design pattern uses java cloning to copy the object.
                         *A possible real world application might be say, when you need to create a spreadsheet containing many cells. 
Rather than set the style for each newly created cell to override the default stylings, you'd use a Prototype pattern to create a template cell, 
and clone that cell when creating new cells.

3.Builder Design Pattern :
  
                             *Builder pattern is a Separate construction of a complex object from its representation so that the same construction process can create different representations.
It is used to construct a complex object step by step and the final step will return the object. 
The process of constructing an object should be generic so that it can be used to create different representations of the same object.

                                     *Product – The product class defines the type of the complex object that is to be generated by the builder pattern.
                                      *Builder – This abstract base class defines all of the steps that must be taken in order to correctly create a product. 
Each step is generally abstract as the actual functionality of the builder is carried out in the concrete subclasses. 
The GetProduct method is used to return the final product. 
The builder class is often replaced with a simple interface.
                                         *ConcreteBuilder – There may be any number of concrete builder classes inheriting from Builder. 
These classes contain the functionality to create a particular complex product.
                                             *Director – The director-class controls the algorithm that generates the final product object.
 A director object is instantiated and its Construct method is called. 
The method includes a parameter to capture the specific concrete builder object that is to be used to generate the product.
 The director then calls methods of the concrete builder in the correct order to generate the product object.
 On completion of the process, the GetProduct method of the builder object can be used to return the product.